// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore;
using PCDF.Servico.Sicola.API.Data.Context;
using PCDF.Servico.Sicola.API.Data.Data.Sicola;
using System;

namespace PCDF.Servico.Sicola.API.Data.Context.Configurations
{
    public partial class TbTaxaConfiguration : IEntityTypeConfiguration<TbTaxa>
    {
        public void Configure(EntityTypeBuilder<TbTaxa> entity)
        {
            entity.HasKey(e => e.CdTaxa);

            entity.ToTable("tb_taxa", "dbo");

            entity.HasComment("Taxa cobrada pelo IML para o fornecimento de cópia do laudo para o interessado legal");

            entity.Property(e => e.CdTaxa)
                .HasColumnName("cd_taxa")
                .HasComment("Chave primaria autoincremental. Código do registro da taxa cobrada");

            entity.Property(e => e.Aditamento)
                .HasColumnName("aditamento")
                .HasComment("Informa se a cópia fornecida foi do aditamento do laudo");

            entity.Property(e => e.CdExcluidor)
                .HasColumnName("cd_excluidor")
                .HasComment("Chave estrangeira na tabela tb_usuario. Código do usuário que excluiu o registro da taxa");

            entity.Property(e => e.CdIncluidor)
                .HasColumnName("cd_incluidor")
                .HasComment("Chave estrangeira na tabela tb_usuario. Código do usuário que incluiu o registro da taxa recebida");

            entity.Property(e => e.CdLaudo)
                .HasColumnName("cd_laudo")
                .HasComment("Chave estrangeira na tabela tb_laudo. Código do laudo cuja cópia está sendo fornecida");

            entity.Property(e => e.CdTipo)
                .HasColumnName("cd_tipo")
                .HasComment("Chave estrangeira na tabela tb_taxa_tipo. Tipo legal que permite o fornecimento da cópia");

            entity.Property(e => e.Controle)
                .HasColumnName("controle")
                .HasComment("Número único crescente para controle das taxas recebidas");

            entity.Property(e => e.DtInclusao)
                .HasColumnType("datetime")
                .HasColumnName("dt_inclusao")
                .HasComment("Data da inclusão da taxa recebida");

            entity.Property(e => e.DtSaida)
                .HasColumnType("datetime")
                .HasColumnName("dt_saida")
                .HasComment("Data da entrega da cópia ao interessado");

            entity.Property(e => e.DtSolicitacao)
                .HasColumnType("datetime")
                .HasColumnName("dt_solicitacao")
                .HasComment("Data da solicitação da cópia do laudo pelo interessado");

            entity.Property(e => e.Excluido)
                .HasColumnName("excluido")
                .HasComment("Informa se o registro foi excluído");

            entity.Property(e => e.Requerente)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("requerente")
                .HasComment("Nome do interessado requerente da cópia do laudo");

            entity.Property(e => e.Rg)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RG")
                .HasComment("Número do RG do interessado requerente da cópia do laudo");

            entity.Property(e => e.Valor)
                .HasColumnType("smallmoney")
                .HasColumnName("valor")
                .HasComment("Valor cobrado pelo fornecimento da cópia do laudo");

            OnConfigurePartial(entity);
        }

        partial void OnConfigurePartial(EntityTypeBuilder<TbTaxa> entity);
    }
}
