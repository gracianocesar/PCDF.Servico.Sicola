// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore;
using PCDF.Servico.Sicola.API.Data.Context;
using PCDF.Servico.Sicola.API.Data.Data.Sicola;
using System;

namespace PCDF.Servico.Sicola.API.Data.Context.Configurations
{
    public partial class TbUsuarioConfiguration : IEntityTypeConfiguration<TbUsuario>
    {
        public void Configure(EntityTypeBuilder<TbUsuario> entity)
        {
            entity.HasKey(e => e.CdUsuario);

            entity.ToTable("tb_usuario", "dbo");

            entity.HasComment("Cadastro de usuários do SICOLA. Registra todos os usuários, independente da função exercida.");

            entity.Property(e => e.CdUsuario)
                .HasColumnName("cd_usuario")
                .HasComment("Chave primaria autoincremental. Código do registro do usuário do SICOLA");

            entity.Property(e => e.Agencia)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("agencia")
                .HasComment("Número da agencia onde o usuário recebe o pagamento");

            entity.Property(e => e.Avisado)
                .HasColumnName("avisado")
                .HasComment("Campo utilizado para saber se o usuário recebeu um determinado aviso ");

            entity.Property(e => e.Bairro)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("bairro")
                .HasComment("Bairro do endereço do usuário");

            entity.Property(e => e.Cadastrador).HasColumnName("CADASTRADOR");

            entity.Property(e => e.CdBanco)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("cd_banco")
                .HasComment("Código do banco onde o usuário recebe o pagamento");

            entity.Property(e => e.CdCargo)
                .HasColumnName("cd_cargo")
                .HasComment("Campo não utilizado no SICOLA");

            entity.Property(e => e.CdCidade)
                .HasColumnName("cd_cidade")
                .HasComment("Chave estrangeira na tabela tb_cidade. Código da cidade do endereço do usuário");

            entity.Property(e => e.CdConselho)
                .HasColumnName("cd_conselho")
                .HasComment("Chave estrangeira na tabela tb_conselho. Código do registro do conselho de classe do usuário, se o usuário faz laudo");

            entity.Property(e => e.CdEstado)
                .HasColumnName("cd_estado")
                .HasComment("Chave estrangeira na tabela tb_estado. Código do estado da cidade do endereço do usuário");

            entity.Property(e => e.CdOrgaoLotacao)
                .HasColumnName("cd_orgao_lotacao")
                .HasComment("Chave estrangeira tb_orgao_lotacao. Código do órgão de lotação do usuário");

            entity.Property(e => e.CdSecao)
                .HasColumnName("cd_secao")
                .HasComment("Chave estrangeira tb_secao_lotacao. Código da seção de lotação do usuário");

            entity.Property(e => e.Celular)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("celular")
                .HasComment("Número do telefone celular do usuário");

            entity.Property(e => e.ContaCorrente)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("conta_corrente")
                .HasComment("Número da conta corrente do usuário");

            entity.Property(e => e.Cpf)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cpf")
                .HasComment("Número do CPF do usuário");

            entity.Property(e => e.Css)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("css")
                .HasComment("Nome do arquivo de configuração do site, escolhido como preferencial pelo usuário");

            entity.Property(e => e.Curso)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("curso")
                .HasComment("Curso superior do usuário");

            entity.Property(e => e.DtCadastro)
                .HasColumnType("datetime")
                .HasColumnName("DT_CADASTRO");

            entity.Property(e => e.DtNascimento)
                .HasColumnType("datetime")
                .HasColumnName("dt_nascimento")
                .HasComment("Data de nascimento do usuário");

            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("email")
                .HasComment("Endereço de email do usuário");

            entity.Property(e => e.Endereco)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("endereco")
                .HasComment("Endereço do usuário");

            entity.Property(e => e.Especialidade)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("especialidade")
                .HasComment("Especialidade médica do usuário, se for médico legista");

            entity.Property(e => e.Excluido)
                .HasColumnName("excluido")
                .HasComment("Informa se o registro foi excluído");

            entity.Property(e => e.ExpiraSenha)
                .HasColumnType("datetime")
                .HasColumnName("expira_senha")
                .HasComment("Data em que a senha do usuário vai expirar");

            entity.Property(e => e.FatorRh)
                .HasColumnName("fator_rh")
                .HasComment("Fator RH do usuário (sangue)");

            entity.Property(e => e.Figtop)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("figtop")
                .HasComment("Nome da figura escolhida pelo usuário para ser exibida no topo de todas as páginas");

            entity.Property(e => e.FoneCel)
                .HasMaxLength(17)
                .IsUnicode(false)
                .HasColumnName("fone_cel")
                .HasComment("Número do telefone celular do usuário");

            entity.Property(e => e.FoneOutro)
                .HasMaxLength(17)
                .IsUnicode(false)
                .HasColumnName("fone_outro")
                .HasComment("Número de outro telefone do usuário");

            entity.Property(e => e.FoneRes)
                .HasMaxLength(17)
                .IsUnicode(false)
                .HasColumnName("fone_res")
                .HasComment("Número do telefone residencial do usuário");

            entity.Property(e => e.GrauInstrucao)
                .HasColumnName("grau_instrucao")
                .HasComment("Grau de instrução do usuário: 1-Fundamental  2-Médio 3-Superior");

            entity.Property(e => e.Guerra)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("guerra")
                .HasComment("Nome abreviado ou apelido do usuário");

            entity.Property(e => e.Matricula)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("matricula")
                .HasComment("Matrícula do usuário");

            entity.Property(e => e.MatriculaBkp)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("matricula_BKP");

            entity.Property(e => e.NmCargoAdHoc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nm_cargo_ad_hoc")
                .HasComment("Nome do cargo para o qual o usuário foi nomeado AD HOC (quem faz relatórios)");

            entity.Property(e => e.NmUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("nm_usuario")
                .HasComment("Nome completo do usuário");

            entity.Property(e => e.NrConselho)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nr_conselho")
                .HasComment("Número do conselho de classe do usuário, se o usuário faz laudo");

            entity.Property(e => e.Obs)
                .HasColumnType("text")
                .HasColumnName("obs")
                .HasComment("Informações adicionais sobre o usuário");

            entity.Property(e => e.Pergunta)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("pergunta")
                .HasComment("Pergunta informada pelo usuário para que ele possa recuperar sua própria senha esquecida");

            entity.Property(e => e.Permissoes)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("permissoes")
                .HasComment("Permissões concedidas ao usuário para utilizar dentro do SICOLA");

            entity.Property(e => e.Resposta)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("resposta")
                .HasComment("Resposta para a pergunta informada pelo usuário para recuperar sua senha");

            entity.Property(e => e.Rg)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("rg")
                .HasComment("Número do RG do usuário");

            entity.Property(e => e.Senha)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("senha")
                .HasComment("Senha criptografada do usuário");

            entity.Property(e => e.Siape)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("siape")
                .HasComment("Código do SIAPE do usuário");

            entity.Property(e => e.TipoSangue)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("tipo_sangue")
                .HasComment("Grupo sanguíneo do usuário");

            entity.Property(e => e.Titulo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("titulo")
                .HasComment("Número do título de eleitor do usuário");

            entity.Property(e => e.Tratamento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tratamento")
                .HasComment("Pronome de tratamento para o usuário");

            entity.Property(e => e.UltimoAcesso)
                .HasColumnType("datetime")
                .HasColumnName("ultimo_acesso")
                .HasComment("Data do último acesso do usuário");

            entity.Property(e => e.Zona)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("zona")
                .HasComment("Zona de votação do usuário");

            entity.HasOne(d => d.CdOrgaoLotacaoNavigation)
                .WithMany(p => p.TbUsuario)
                .HasForeignKey(d => d.CdOrgaoLotacao)
                .HasConstraintName("FK_tb_usuario_tb_orgao_lotacao");

            entity.HasOne(d => d.CdSecaoNavigation)
                .WithMany(p => p.TbUsuario)
                .HasForeignKey(d => d.CdSecao)
                .HasConstraintName("FK_tb_usuario_tb_secao_lotacao");

            OnConfigurePartial(entity);
        }

        partial void OnConfigurePartial(EntityTypeBuilder<TbUsuario> entity);
    }
}
