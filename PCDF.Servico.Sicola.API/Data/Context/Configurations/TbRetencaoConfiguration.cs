// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore;
using PCDF.Servico.Sicola.API.Data.Context;
using PCDF.Servico.Sicola.API.Data.Data.Sicola;
using System;

namespace PCDF.Servico.Sicola.API.Data.Context.Configurations
{
    public partial class TbRetencaoConfiguration : IEntityTypeConfiguration<TbRetencao>
    {
        public void Configure(EntityTypeBuilder<TbRetencao> entity)
        {
            entity.HasKey(e => e.CdRetencao);

            entity.ToTable("tb_retencao", "dbo");

            entity.HasComment("Solicitacao de retenção ou aviso de homologação de um laudo");

            entity.Property(e => e.CdRetencao)
                .HasColumnName("cd_retencao")
                .HasComment("Chave primaria autoincremental. Código do registro da solicitação de retenção ou aviso de homologação de um laudo");

            entity.Property(e => e.CdLaudo)
                .HasColumnName("cd_laudo")
                .HasComment("Chave estrangeira na tabela tb_laudo. Código do laudo que está sendo solicitada a retenção ou aviso de homologação");

            entity.Property(e => e.CdLiberou)
                .HasColumnName("cd_liberou")
                .HasComment("Chave estrangeira na tabela tb_usuario. Código do usuário que liberou a retenção do laudo");

            entity.Property(e => e.CdReteve)
                .HasColumnName("cd_reteve")
                .HasComment("Chave estrangeira na tabela tb_usuario. Código do usuário que está solicitando a retenção ou aviso de homologação do laudo");

            entity.Property(e => e.DtRetencao)
                .HasColumnType("datetime")
                .HasColumnName("dt_retencao")
                .HasComment("Data da solicitação da retenção ou aviso de homologação do laudo");

            entity.Property(e => e.Excluido)
                .HasColumnName("excluido")
                .HasComment("Informa se o registro foi excluido");

            entity.Property(e => e.Motivo)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("motivo")
                .HasComment("Descrição do motivo do pedido de retenção ou aviso de homologação do laudo");

            entity.Property(e => e.Quando)
                .HasColumnName("quando")
                .HasComment("Informa se a retenção será retido (1) ou se será apenas enviado um aviso (2) ao usuário que solicitou");

            entity.Property(e => e.TipoDoc)
                .HasColumnName("tipo_doc")
                .HasComment("Informa se o pedido é para um laudo (1) ou para um aditamento (2)");

            OnConfigurePartial(entity);
        }

        partial void OnConfigurePartial(EntityTypeBuilder<TbRetencao> entity);
    }
}
