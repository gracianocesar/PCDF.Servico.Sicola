// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore;
using PCDF.Servico.Sicola.API.Data.Context;
using PCDF.Servico.Sicola.API.Data.Data.Sicola;
using System;

namespace PCDF.Servico.Sicola.API.Data.Context.Configurations
{
    public partial class TbToxicologicoConfiguration : IEntityTypeConfiguration<TbToxicologico>
    {
        public void Configure(EntityTypeBuilder<TbToxicologico> entity)
        {
            entity.HasKey(e => e.CdToxicologico)
                .HasName("PK_tb_toxicilogico");

            entity.ToTable("tb_toxicologico", "dbo");

            entity.HasComment("Pedido/resultado de exame laboratorial (toxicológico ou histopatológico)");

            entity.Property(e => e.CdToxicologico)
                .HasColumnName("cd_toxicologico")
                .HasComment("Chave primaria autoincremental. Código do registro do pedido de exame laboratorial feito pelo legista");

            entity.Property(e => e.Cancelado)
                .HasColumnName("cancelado")
                .HasComment("Informa se o registro foi excluido. Pedido cancelado.");

            entity.Property(e => e.CdDigitador)
                .HasColumnName("cd_digitador")
                .HasComment("Chave estrangeira na tabela tb_usuario. Código do usuário do laboratório responsável pela digitação do resultado do exame");

            entity.Property(e => e.CdLaudo)
                .HasColumnName("cd_laudo")
                .HasComment("Chave estrangeira na tabela tb_laudo. Código do laudo ao qual se refere o pedido de exame laboratorial");

            entity.Property(e => e.CdPeritoTox)
                .HasColumnName("cd_perito_tox")
                .HasComment("Chave estrangeira na tabela tb_usuario. Código do usuário (legista) do laboratório, responsável pelo resultado");

            entity.Property(e => e.CdSolicitante)
                .HasColumnName("cd_solicitante")
                .HasComment("Chave estrangeira na tabela tb_usuario. Código do usuário (legista) que solicitou o exame laboratorial");

            entity.Property(e => e.DtArquivado)
                .HasColumnType("datetime")
                .HasColumnName("dt_arquivado")
                .HasComment("Data em que o solicitante arquiva o pedido para removê-lo da sua listagem de pendências");

            entity.Property(e => e.DtHomologacao)
                .HasColumnType("datetime")
                .HasColumnName("dt_homologacao")
                .HasComment("Data do recebimento do resultado do exame pelo legista solicitante");

            entity.Property(e => e.DtInicio)
                .HasColumnType("datetime")
                .HasColumnName("dt_inicio")
                .HasComment("Data do início do exame dentro do laboratório");

            entity.Property(e => e.DtPeritoTox)
                .HasColumnType("datetime")
                .HasColumnName("dt_perito_tox")
                .HasComment("Data em que o exame foi iniciado dentro do laboratório");

            entity.Property(e => e.DtSolicitacao)
                .HasColumnType("datetime")
                .HasColumnName("dt_solicitacao")
                .HasComment("Data da criação do pedido de exame pelo legista");

            entity.Property(e => e.DtTermino)
                .HasColumnType("datetime")
                .HasColumnName("dt_termino")
                .HasComment("Data da conclusão do exame pelo laboratório");

            entity.Property(e => e.ExamesPedidos)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("exames_pedidos")
                .HasComment("Este campo deixou de ser usado em 2006. Armazenava as substâncias suspeitas para análise");

            entity.Property(e => e.HrHomologacao)
                .HasColumnType("datetime")
                .HasColumnName("hr_homologacao")
                .HasComment("Hora do recebimento do resultado do exame pelo legista solicitante");

            entity.Property(e => e.HrInicio)
                .HasColumnType("datetime")
                .HasColumnName("hr_inicio")
                .HasComment("Hora do início do exame dentro do laboratório");

            entity.Property(e => e.HrSolicitacao)
                .HasColumnType("datetime")
                .HasColumnName("hr_solicitacao")
                .HasComment("Hora da solicitação do pedido de exame pelo legista");

            entity.Property(e => e.HrTermino)
                .HasColumnType("datetime")
                .HasColumnName("hr_termino")
                .HasComment("Hora da conclusão do exame pelo laboratório");

            entity.Property(e => e.LaudoToxicologico)
                .HasMaxLength(6000)
                .IsUnicode(false)
                .HasColumnName("laudo_toxicologico")
                .HasComment("Informações adicionais do laboratório sobre o resultado do exame");

            entity.Property(e => e.NrLaudoTox)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("nr_laudo_tox")
                .HasComment("Número interno do laboratório para identificar o resultado do exame");

            entity.Property(e => e.Prioridade)
                .HasColumnName("prioridade")
                .HasComment("Informa se há necessidade de alguma priorização para o fornecimento do resultado do exame");

            entity.Property(e => e.Texto)
                .HasColumnType("text")
                .HasColumnName("texto")
                .HasComment("Informações adicionais do solicitante para o laboratório");

            entity.Property(e => e.TpExame)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("tp_exame")
                .HasComment("Informa se o exame é toxicológico ( t ) ou histopatológico ( h )");

            OnConfigurePartial(entity);
        }

        partial void OnConfigurePartial(EntityTypeBuilder<TbToxicologico> entity);
    }
}
