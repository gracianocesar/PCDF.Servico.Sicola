// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore;
using PCDF.Servico.Sicola.API.Data.Context;
using PCDF.Servico.Sicola.API.Data.Data.Sicola;
using System;

namespace PCDF.Servico.Sicola.API.Data.Context.Configurations
{
    public partial class TbLaudoConfiguration : IEntityTypeConfiguration<TbLaudo>
    {
        public void Configure(EntityTypeBuilder<TbLaudo> entity)
        {
            entity.HasKey(e => new { e.NrLaudo, e.AnoLaudo });

            entity.ToTable("tb_laudo", "dbo");

            entity.HasComment("Informações relacionadas ao documento (laudo ou relatório ou controle do SVO (serviço de verificação de óbitos))");

            entity.HasIndex(e => e.CdLaudo, "IX_TB_LAUDO_CD_LAUDO")
                .HasFillFactor((byte)85);

            entity.HasIndex(e => new { e.CdPerito1, e.DtLaudo, e.Cancelado }, "IX_TB_LAUDO_CD_PERITO1_DT_LAUDO_CANCELADO_INCLUDE")
                .HasFillFactor((byte)85);

            entity.Property(e => e.NrLaudo)
                .HasColumnName("nr_laudo")
                .HasComment("Chave primaria, armazena o número do documento");

            entity.Property(e => e.AnoLaudo)
                .HasColumnName("ano_laudo")
                .HasComment("Chave primaria. armazena o ano do documento");

            entity.Property(e => e.AnoOcorrencia)
                .HasColumnName("ano_ocorrencia")
                .HasComment("Ano da ocorrência policial");

            entity.Property(e => e.AnoProtocolo)
                .HasColumnName("ano_protocolo")
                .HasComment("Ano do protocolo da PCDF");

            entity.Property(e => e.Cancelado)
                .HasColumnName("cancelado")
                .HasComment("Informa se o documento está cancelado");

            entity.Property(e => e.CdArquivador)
                .HasColumnName("cd_arquivador")
                .HasComment("Chave estrangeira tb_usuario. Código do usuário que arquivou o documento");

            entity.Property(e => e.CdCidadeEndereco)
                .HasColumnName("cd_cidade_endereco")
                .HasComment("Chave estrangeira da tabela tb_cidade. Código da cidade do endereço do periciando");

            entity.Property(e => e.CdCidadeNaturalidade)
                .HasColumnName("cd_cidade_naturalidade")
                .HasComment("Chave estrangeira da tabela tb_cidade. Código da cidade onde nasceu o periciando");

            entity.Property(e => e.CdCorPele)
                .HasColumnName("cd_cor_pele")
                .HasComment("Chave estrangeira da tabela tb_cor_pele. Código da cor da pele do periciando");

            entity.Property(e => e.CdDestinatario)
                .HasColumnName("cd_destinatario")
                .HasComment("Chave estrangeira da tabela tb_orgao. Código do órgão a quem se destina o documento (laudo)");

            entity.Property(e => e.CdEstadoCivil)
                .HasColumnName("cd_estado_civil")
                .HasComment("Chave estrangeira da tabela tb_estado_civil. Código do estado civil do periciando");

            entity.Property(e => e.CdHomologador)
                .HasColumnName("cd_homologador")
                .HasComment("Chave estrangeira tb_usuario. Código do usuário que homologou o documento");

            entity.Property(e => e.CdIncluidor)
                .HasColumnName("cd_incluidor")
                .HasComment("Código do usuário incluidor do documento");

            entity.Property(e => e.CdLaudo)
                .ValueGeneratedOnAdd()
                .HasColumnName("cd_laudo")
                .HasComment("Código único do documento. Autoincrementado.");

            entity.Property(e => e.CdNacionalidade)
                .HasColumnName("cd_nacionalidade")
                .HasComment("Chave estrangeira da tabela tb_nacionalidade. Código do país onde nasceu o periciando.");

            entity.Property(e => e.CdOrgaoExpedidor)
                .HasColumnName("cd_orgao_expedidor")
                .HasComment("Chave estrangeira da tabela tb_orgao. Código do órgão que expediu o documento apresentado para o exame do periciando");

            entity.Property(e => e.CdOrgaoGerador).HasColumnName("cd_orgao_gerador");

            entity.Property(e => e.CdOrgaoOcorrencia)
                .HasColumnName("cd_orgao_ocorrencia")
                .HasComment("Chave estrangeira da tabela tb_orgao. Código do órgão (DP) emissor da ocorrência policial");

            entity.Property(e => e.CdPerito1)
                .HasColumnName("cd_perito1")
                .HasComment("Código do relator ou médico do SVO");

            entity.Property(e => e.CdPerito2)
                .HasColumnName("cd_perito2")
                .HasComment("Código do revisor ou médico do SVO");

            entity.Property(e => e.CdProfissao)
                .HasColumnName("cd_profissao")
                .HasComment("Chave estrangeira da tabela tb_profissao. Código da profissão do periciando");

            entity.Property(e => e.CdSexo)
                .HasColumnName("cd_sexo")
                .HasComment("Chave estrangeira da tabela tb_sexo. Código do sexo do periciando");

            entity.Property(e => e.CdTpDocumento)
                .HasColumnName("cd_tp_documento")
                .HasComment("Chave estrangeira da tabela tb_documento. Código do tipo de documento apresentado para o exame do periciando");

            entity.Property(e => e.CdTpLaudo)
                .HasColumnName("cd_tp_laudo")
                .HasComment("Código do tipo de documento. Chave estrangeira, tabela tb_tp_laudo");

            entity.Property(e => e.CdUfEndereco)
                .HasColumnName("cd_uf_endereco")
                .HasComment("Chave estrangeira da tabela tb_estado. Código do estado do endereço do periciando");

            entity.Property(e => e.CdUfNaturalidade)
                .HasColumnName("cd_uf_naturalidade")
                .HasComment("Chave estrangeira da tabela tb_estado. Código do estado onde nasceu o periciando");

            entity.Property(e => e.Cpf)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("cpf")
                .HasComment("Número do CPF do periciando");

            entity.Property(e => e.DscAssunto)
                .IsUnicode(false)
                .HasColumnName("dsc_assunto");

            entity.Property(e => e.DtArquivado)
                .HasColumnType("datetime")
                .HasColumnName("dt_arquivado")
                .HasComment("Data do arquivamento do documento");

            entity.Property(e => e.DtAssinatura)
                .HasColumnType("datetime")
                .HasColumnName("dt_assinatura")
                .HasComment("Data da assinatura do documento");

            entity.Property(e => e.DtDocumento)
                .HasColumnType("datetime")
                .HasColumnName("dt_documento")
                .HasComment("Data da emissão do documento apresentado para o exame do periciando");

            entity.Property(e => e.DtEnvioPerito2)
                .HasColumnType("datetime")
                .HasColumnName("dt_envio_perito2")
                .HasComment("Data em que o relator encaminhou o documento (laudo) para o revisor.");

            entity.Property(e => e.DtFato)
                .HasColumnType("datetime")
                .HasColumnName("dt_fato")
                .HasComment("Data em que ocorreu o fato que motivou o exame. Este campo ainda não foi utilizado (até 08/11/2018)");

            entity.Property(e => e.DtHomologado)
                .HasColumnType("datetime")
                .HasColumnName("dt_homologado")
                .HasComment("Data da homologação do documento");

            entity.Property(e => e.DtInicio)
                .HasColumnType("datetime")
                .HasColumnName("dt_inicio")
                .HasComment("Data que o relator assumiu o documento (laudo) para iniciar a perícia médica");

            entity.Property(e => e.DtLaudo)
                .HasColumnType("datetime")
                .HasColumnName("dt_laudo")
                .HasComment("Data da criação do documento (data da inclusão do registro na tabela)");

            entity.Property(e => e.DtNascimento)
                .HasColumnType("datetime")
                .HasColumnName("dt_nascimento")
                .HasComment("Data de nascimento do periciando");

            entity.Property(e => e.Endereco)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("endereco")
                .HasComment("Endereço do periciando");

            entity.Property(e => e.HrArquivado)
                .HasColumnType("datetime")
                .HasColumnName("hr_arquivado")
                .HasComment("Campo não utilizado, pois a hora do arquivamento é armazenada junto com a data  do arquivamento");

            entity.Property(e => e.HrAssinatura)
                .HasColumnType("datetime")
                .HasColumnName("hr_assinatura")
                .HasComment("Horário da assinatura do documento");

            entity.Property(e => e.HrHomologado)
                .HasColumnType("datetime")
                .HasColumnName("hr_homologado")
                .HasComment("Campo não utilizado, pois a hora da homologação é armazenada junto com a data da homologação.");

            entity.Property(e => e.HrLaudo)
                .HasColumnType("datetime")
                .HasColumnName("hr_laudo")
                .HasComment("Campo não utilizado, pois a hora é armazenada junto com a data do documento");

            entity.Property(e => e.NmCargoPerito1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nm_cargo_perito1")
                .HasComment("Nome do cargo do relator do documento nos casos em que o documento é um relatório");

            entity.Property(e => e.NmCargoPerito2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nm_cargo_perito2")
                .HasComment("Nome do cargo do revisor do documento nos casos em que o documento é um relatório");

            entity.Property(e => e.NmMae)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("nm_mae")
                .HasComment("Nome da mãe do periciando");

            entity.Property(e => e.NmPai)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("nm_pai")
                .HasComment("Nome do pai do periciando");

            entity.Property(e => e.NmPericiando)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("nm_periciando")
                .HasComment("Nome do periciando (pessoa que se submeteu à perícia)");

            entity.Property(e => e.NmSocial)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nm_social")
                .HasComment("Nome social do periciando. Para travestis e transexuais");

            entity.Property(e => e.NrCtps)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("nr_ctps");

            entity.Property(e => e.NrDocumento)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("nr_documento")
                .HasComment("Número do documento apresentado para o exame do periciando");

            entity.Property(e => e.NrOcorrencia)
                .HasColumnName("nr_ocorrencia")
                .HasComment("Número da ocorrência policial registrada sobre o fato que motivou o exame");

            entity.Property(e => e.NrPassaporte)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("nr_passaporte");

            entity.Property(e => e.NrProtocolo)
                .HasColumnName("nr_protocolo")
                .HasComment("Número do protocolo da PCDF");

            entity.Property(e => e.Rg)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("rg")
                .HasComment("Número do Registro Geral do periciando");

            entity.Property(e => e.RgDono)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("rg_dono")
                .HasComment("A quem pertence o RG apresentado para o exame do periciando");

            entity.Property(e => e.RgExpedidor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("rg_expedidor")
                .HasComment("Nome do órgão expedidor do RG do periciando");

            entity.Property(e => e.Situacao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("situacao");

            entity.Property(e => e.Telefone)
                .HasMaxLength(17)
                .IsUnicode(false)
                .HasColumnName("telefone")
                .HasComment("Número do telefone de contato do periciando");

            OnConfigurePartial(entity);
        }

        partial void OnConfigurePartial(EntityTypeBuilder<TbLaudo> entity);
    }
}
